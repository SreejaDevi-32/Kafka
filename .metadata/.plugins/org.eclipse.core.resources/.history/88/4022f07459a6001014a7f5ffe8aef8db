package com.kafka.springboot;

import java.net.URI;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.background.BackgroundEventHandler;
import com.launchdarkly.eventsource.background.BackgroundEventSource;

import okhttp3.Request;

@Service
public class WikimediaChangesProducer {

    private static final Logger LOGGER = LoggerFactory.getLogger(WikimediaChangesProducer.class);

    private final KafkaTemplate<String, String> kafkaTemplate;

    public WikimediaChangesProducer(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }
    public void sendMessage() throws InterruptedException {
    	
        String topic = "wikimedia_recentchange";
        String url = "https://stream.wikimedia.org/v2/stream/recentchange";

        BackgroundEventHandler eventHandler = new WikimediaChangesHandler(kafkaTemplate, topic);
        EventSource.Builder eventSourceBuilder = new EventSource.Builder(URI.create(url))
                .header("User-Agent", "MyAppName/1.0 (myemail@example.com)");
        BackgroundEventSource source = new BackgroundEventSource.Builder(
                eventHandler,
                eventSourceBuilder
        ).build();

        source.start(); // start in background thread
        LOGGER.info("Started Wikimedia stream...");
        
        // keep main thread alive
        TimeUnit.MINUTES.sleep(10); // or manage lifecycle properly
    }

}
