package com.kafka.springboot;

import java.net.URI;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.launchdarkly.eventsource.EventSource;
import com.launchdarkly.eventsource.background.BackgroundEventHandler;
import com.launchdarkly.eventsource.background.BackgroundEventSource;

import okhttp3.OkHttpClient;
import okhttp3.Request;

@Service
public class WikimediaChangesProducer {

    private static final Logger LOGGER = LoggerFactory.getLogger(WikimediaChangesProducer.class);

    private final KafkaTemplate<String, String> kafkaTemplate;

    public WikimediaChangesProducer(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }
    public void sendMessage() throws InterruptedException {
        String topic = "wikimedia_recentchange";
        String url = "https://stream.wikimedia.org/v2/stream/recentchange";

        WikimediaChangesHandler eventHandler = new WikimediaChangesHandler(kafkaTemplate, topic);

        OkHttpClient client = new OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.SECONDS)
                .readTimeout(0, TimeUnit.MILLISECONDS) // stream never ends
                .build();
        Request request = new Request.Builder()
                .url(url)
                .header("User-Agent", "MyAppName/1.0 (myemail@example.com)")
                .build();
        EventSource.Builder eventSourceBuilder = new EventSource.Builder(request, client);

        BackgroundEventSource source = new BackgroundEventSource.Builder(eventHandler, eventSourceBuilder).build();

        source.start();
        LOGGER.info("Started Wikimedia stream...");

        // Keep main thread alive for demonstration
        TimeUnit.MINUTES.sleep(10);

        // Optionally stop afterwards
        source.close();
    }

}
